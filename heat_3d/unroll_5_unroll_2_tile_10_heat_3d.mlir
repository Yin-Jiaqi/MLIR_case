#map = affine_map<(d0) -> (d0)>
#map1 = affine_map<(d0) -> (d0 + 10)>
#map2 = affine_map<()[s0] -> (s0 - 1)>
#map3 = affine_map<()[s0] -> (((s0 floordiv 2 - 1) floordiv 5) * 10 + 1)>
#map4 = affine_map<(d0) -> (d0 + 1)>
#map5 = affine_map<(d0) -> (d0 + 2)>
#map6 = affine_map<(d0) -> (d0 + 4)>
#map7 = affine_map<(d0) -> (d0 + 6)>
#map8 = affine_map<(d0) -> (d0 + 8)>
#map9 = affine_map<()[s0] -> ((s0 floordiv 2) * 2 - 1)>
#map10 = affine_map<()[s0] -> ((s0 floordiv 2) * 2 + ((s0 mod 2) floordiv 5) * 5 - 1)>
#map11 = affine_map<(d0) -> (d0 + 3)>
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @kernel_heat_3d(%arg0: i32, %arg1: i32, %arg2: memref<?x120x120xf64>, %arg3: memref<?x120x120xf64>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %cst = arith.constant 1.250000e-01 : f64
    %cst_0 = arith.constant 2.000000e+00 : f64
    %0 = arith.index_cast %arg1 : i32 to index
    affine.for %arg4 = 1 to 501 step 10 {
      affine.for %arg5 = #map(%arg4) to #map1(%arg4) {
        affine.for %arg6 = 1 to #map2()[%0] {
          affine.for %arg7 = 1 to #map2()[%0] {
            affine.for %arg8 = 1 to #map3()[%0] step 10 {
              %1 = affine.load %arg2[%arg6 + 1, %arg7, %arg8] : memref<?x120x120xf64>
              %2 = affine.load %arg2[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %3 = arith.mulf %2, %cst_0 : f64
              %4 = arith.subf %1, %3 : f64
              %5 = affine.load %arg2[%arg6 - 1, %arg7, %arg8] : memref<?x120x120xf64>
              %6 = arith.addf %4, %5 : f64
              %7 = arith.mulf %6, %cst : f64
              %8 = affine.load %arg2[%arg6, %arg7 + 1, %arg8] : memref<?x120x120xf64>
              %9 = arith.subf %8, %3 : f64
              %10 = affine.load %arg2[%arg6, %arg7 - 1, %arg8] : memref<?x120x120xf64>
              %11 = arith.addf %9, %10 : f64
              %12 = arith.mulf %11, %cst : f64
              %13 = arith.addf %7, %12 : f64
              %14 = affine.load %arg2[%arg6, %arg7, %arg8 + 1] : memref<?x120x120xf64>
              %15 = arith.subf %14, %3 : f64
              %16 = affine.load %arg2[%arg6, %arg7, %arg8 - 1] : memref<?x120x120xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.mulf %17, %cst : f64
              %19 = arith.addf %13, %18 : f64
              %20 = arith.addf %19, %2 : f64
              affine.store %20, %arg3[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %21 = affine.apply #map4(%arg8)
              %22 = affine.load %arg2[%arg6 + 1, %arg7, %21] : memref<?x120x120xf64>
              %23 = affine.load %arg2[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %24 = arith.mulf %23, %cst_0 : f64
              %25 = arith.subf %22, %24 : f64
              %26 = affine.load %arg2[%arg6 - 1, %arg7, %21] : memref<?x120x120xf64>
              %27 = arith.addf %25, %26 : f64
              %28 = arith.mulf %27, %cst : f64
              %29 = affine.load %arg2[%arg6, %arg7 + 1, %21] : memref<?x120x120xf64>
              %30 = arith.subf %29, %24 : f64
              %31 = affine.load %arg2[%arg6, %arg7 - 1, %21] : memref<?x120x120xf64>
              %32 = arith.addf %30, %31 : f64
              %33 = arith.mulf %32, %cst : f64
              %34 = arith.addf %28, %33 : f64
              %35 = affine.load %arg2[%arg6, %arg7, %21 + 1] : memref<?x120x120xf64>
              %36 = arith.subf %35, %24 : f64
              %37 = affine.load %arg2[%arg6, %arg7, %21 - 1] : memref<?x120x120xf64>
              %38 = arith.addf %36, %37 : f64
              %39 = arith.mulf %38, %cst : f64
              %40 = arith.addf %34, %39 : f64
              %41 = arith.addf %40, %23 : f64
              affine.store %41, %arg3[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %42 = affine.apply #map5(%arg8)
              %43 = affine.load %arg2[%arg6 + 1, %arg7, %42] : memref<?x120x120xf64>
              %44 = affine.load %arg2[%arg6, %arg7, %42] : memref<?x120x120xf64>
              %45 = arith.mulf %44, %cst_0 : f64
              %46 = arith.subf %43, %45 : f64
              %47 = affine.load %arg2[%arg6 - 1, %arg7, %42] : memref<?x120x120xf64>
              %48 = arith.addf %46, %47 : f64
              %49 = arith.mulf %48, %cst : f64
              %50 = affine.load %arg2[%arg6, %arg7 + 1, %42] : memref<?x120x120xf64>
              %51 = arith.subf %50, %45 : f64
              %52 = affine.load %arg2[%arg6, %arg7 - 1, %42] : memref<?x120x120xf64>
              %53 = arith.addf %51, %52 : f64
              %54 = arith.mulf %53, %cst : f64
              %55 = arith.addf %49, %54 : f64
              %56 = affine.load %arg2[%arg6, %arg7, %42 + 1] : memref<?x120x120xf64>
              %57 = arith.subf %56, %45 : f64
              %58 = affine.load %arg2[%arg6, %arg7, %42 - 1] : memref<?x120x120xf64>
              %59 = arith.addf %57, %58 : f64
              %60 = arith.mulf %59, %cst : f64
              %61 = arith.addf %55, %60 : f64
              %62 = arith.addf %61, %44 : f64
              affine.store %62, %arg3[%arg6, %arg7, %42] : memref<?x120x120xf64>
              %63 = affine.apply #map4(%42)
              %64 = affine.load %arg2[%arg6 + 1, %arg7, %63] : memref<?x120x120xf64>
              %65 = affine.load %arg2[%arg6, %arg7, %63] : memref<?x120x120xf64>
              %66 = arith.mulf %65, %cst_0 : f64
              %67 = arith.subf %64, %66 : f64
              %68 = affine.load %arg2[%arg6 - 1, %arg7, %63] : memref<?x120x120xf64>
              %69 = arith.addf %67, %68 : f64
              %70 = arith.mulf %69, %cst : f64
              %71 = affine.load %arg2[%arg6, %arg7 + 1, %63] : memref<?x120x120xf64>
              %72 = arith.subf %71, %66 : f64
              %73 = affine.load %arg2[%arg6, %arg7 - 1, %63] : memref<?x120x120xf64>
              %74 = arith.addf %72, %73 : f64
              %75 = arith.mulf %74, %cst : f64
              %76 = arith.addf %70, %75 : f64
              %77 = affine.load %arg2[%arg6, %arg7, %63 + 1] : memref<?x120x120xf64>
              %78 = arith.subf %77, %66 : f64
              %79 = affine.load %arg2[%arg6, %arg7, %63 - 1] : memref<?x120x120xf64>
              %80 = arith.addf %78, %79 : f64
              %81 = arith.mulf %80, %cst : f64
              %82 = arith.addf %76, %81 : f64
              %83 = arith.addf %82, %65 : f64
              affine.store %83, %arg3[%arg6, %arg7, %63] : memref<?x120x120xf64>
              %84 = affine.apply #map6(%arg8)
              %85 = affine.load %arg2[%arg6 + 1, %arg7, %84] : memref<?x120x120xf64>
              %86 = affine.load %arg2[%arg6, %arg7, %84] : memref<?x120x120xf64>
              %87 = arith.mulf %86, %cst_0 : f64
              %88 = arith.subf %85, %87 : f64
              %89 = affine.load %arg2[%arg6 - 1, %arg7, %84] : memref<?x120x120xf64>
              %90 = arith.addf %88, %89 : f64
              %91 = arith.mulf %90, %cst : f64
              %92 = affine.load %arg2[%arg6, %arg7 + 1, %84] : memref<?x120x120xf64>
              %93 = arith.subf %92, %87 : f64
              %94 = affine.load %arg2[%arg6, %arg7 - 1, %84] : memref<?x120x120xf64>
              %95 = arith.addf %93, %94 : f64
              %96 = arith.mulf %95, %cst : f64
              %97 = arith.addf %91, %96 : f64
              %98 = affine.load %arg2[%arg6, %arg7, %84 + 1] : memref<?x120x120xf64>
              %99 = arith.subf %98, %87 : f64
              %100 = affine.load %arg2[%arg6, %arg7, %84 - 1] : memref<?x120x120xf64>
              %101 = arith.addf %99, %100 : f64
              %102 = arith.mulf %101, %cst : f64
              %103 = arith.addf %97, %102 : f64
              %104 = arith.addf %103, %86 : f64
              affine.store %104, %arg3[%arg6, %arg7, %84] : memref<?x120x120xf64>
              %105 = affine.apply #map4(%84)
              %106 = affine.load %arg2[%arg6 + 1, %arg7, %105] : memref<?x120x120xf64>
              %107 = affine.load %arg2[%arg6, %arg7, %105] : memref<?x120x120xf64>
              %108 = arith.mulf %107, %cst_0 : f64
              %109 = arith.subf %106, %108 : f64
              %110 = affine.load %arg2[%arg6 - 1, %arg7, %105] : memref<?x120x120xf64>
              %111 = arith.addf %109, %110 : f64
              %112 = arith.mulf %111, %cst : f64
              %113 = affine.load %arg2[%arg6, %arg7 + 1, %105] : memref<?x120x120xf64>
              %114 = arith.subf %113, %108 : f64
              %115 = affine.load %arg2[%arg6, %arg7 - 1, %105] : memref<?x120x120xf64>
              %116 = arith.addf %114, %115 : f64
              %117 = arith.mulf %116, %cst : f64
              %118 = arith.addf %112, %117 : f64
              %119 = affine.load %arg2[%arg6, %arg7, %105 + 1] : memref<?x120x120xf64>
              %120 = arith.subf %119, %108 : f64
              %121 = affine.load %arg2[%arg6, %arg7, %105 - 1] : memref<?x120x120xf64>
              %122 = arith.addf %120, %121 : f64
              %123 = arith.mulf %122, %cst : f64
              %124 = arith.addf %118, %123 : f64
              %125 = arith.addf %124, %107 : f64
              affine.store %125, %arg3[%arg6, %arg7, %105] : memref<?x120x120xf64>
              %126 = affine.apply #map7(%arg8)
              %127 = affine.load %arg2[%arg6 + 1, %arg7, %126] : memref<?x120x120xf64>
              %128 = affine.load %arg2[%arg6, %arg7, %126] : memref<?x120x120xf64>
              %129 = arith.mulf %128, %cst_0 : f64
              %130 = arith.subf %127, %129 : f64
              %131 = affine.load %arg2[%arg6 - 1, %arg7, %126] : memref<?x120x120xf64>
              %132 = arith.addf %130, %131 : f64
              %133 = arith.mulf %132, %cst : f64
              %134 = affine.load %arg2[%arg6, %arg7 + 1, %126] : memref<?x120x120xf64>
              %135 = arith.subf %134, %129 : f64
              %136 = affine.load %arg2[%arg6, %arg7 - 1, %126] : memref<?x120x120xf64>
              %137 = arith.addf %135, %136 : f64
              %138 = arith.mulf %137, %cst : f64
              %139 = arith.addf %133, %138 : f64
              %140 = affine.load %arg2[%arg6, %arg7, %126 + 1] : memref<?x120x120xf64>
              %141 = arith.subf %140, %129 : f64
              %142 = affine.load %arg2[%arg6, %arg7, %126 - 1] : memref<?x120x120xf64>
              %143 = arith.addf %141, %142 : f64
              %144 = arith.mulf %143, %cst : f64
              %145 = arith.addf %139, %144 : f64
              %146 = arith.addf %145, %128 : f64
              affine.store %146, %arg3[%arg6, %arg7, %126] : memref<?x120x120xf64>
              %147 = affine.apply #map4(%126)
              %148 = affine.load %arg2[%arg6 + 1, %arg7, %147] : memref<?x120x120xf64>
              %149 = affine.load %arg2[%arg6, %arg7, %147] : memref<?x120x120xf64>
              %150 = arith.mulf %149, %cst_0 : f64
              %151 = arith.subf %148, %150 : f64
              %152 = affine.load %arg2[%arg6 - 1, %arg7, %147] : memref<?x120x120xf64>
              %153 = arith.addf %151, %152 : f64
              %154 = arith.mulf %153, %cst : f64
              %155 = affine.load %arg2[%arg6, %arg7 + 1, %147] : memref<?x120x120xf64>
              %156 = arith.subf %155, %150 : f64
              %157 = affine.load %arg2[%arg6, %arg7 - 1, %147] : memref<?x120x120xf64>
              %158 = arith.addf %156, %157 : f64
              %159 = arith.mulf %158, %cst : f64
              %160 = arith.addf %154, %159 : f64
              %161 = affine.load %arg2[%arg6, %arg7, %147 + 1] : memref<?x120x120xf64>
              %162 = arith.subf %161, %150 : f64
              %163 = affine.load %arg2[%arg6, %arg7, %147 - 1] : memref<?x120x120xf64>
              %164 = arith.addf %162, %163 : f64
              %165 = arith.mulf %164, %cst : f64
              %166 = arith.addf %160, %165 : f64
              %167 = arith.addf %166, %149 : f64
              affine.store %167, %arg3[%arg6, %arg7, %147] : memref<?x120x120xf64>
              %168 = affine.apply #map8(%arg8)
              %169 = affine.load %arg2[%arg6 + 1, %arg7, %168] : memref<?x120x120xf64>
              %170 = affine.load %arg2[%arg6, %arg7, %168] : memref<?x120x120xf64>
              %171 = arith.mulf %170, %cst_0 : f64
              %172 = arith.subf %169, %171 : f64
              %173 = affine.load %arg2[%arg6 - 1, %arg7, %168] : memref<?x120x120xf64>
              %174 = arith.addf %172, %173 : f64
              %175 = arith.mulf %174, %cst : f64
              %176 = affine.load %arg2[%arg6, %arg7 + 1, %168] : memref<?x120x120xf64>
              %177 = arith.subf %176, %171 : f64
              %178 = affine.load %arg2[%arg6, %arg7 - 1, %168] : memref<?x120x120xf64>
              %179 = arith.addf %177, %178 : f64
              %180 = arith.mulf %179, %cst : f64
              %181 = arith.addf %175, %180 : f64
              %182 = affine.load %arg2[%arg6, %arg7, %168 + 1] : memref<?x120x120xf64>
              %183 = arith.subf %182, %171 : f64
              %184 = affine.load %arg2[%arg6, %arg7, %168 - 1] : memref<?x120x120xf64>
              %185 = arith.addf %183, %184 : f64
              %186 = arith.mulf %185, %cst : f64
              %187 = arith.addf %181, %186 : f64
              %188 = arith.addf %187, %170 : f64
              affine.store %188, %arg3[%arg6, %arg7, %168] : memref<?x120x120xf64>
              %189 = affine.apply #map4(%168)
              %190 = affine.load %arg2[%arg6 + 1, %arg7, %189] : memref<?x120x120xf64>
              %191 = affine.load %arg2[%arg6, %arg7, %189] : memref<?x120x120xf64>
              %192 = arith.mulf %191, %cst_0 : f64
              %193 = arith.subf %190, %192 : f64
              %194 = affine.load %arg2[%arg6 - 1, %arg7, %189] : memref<?x120x120xf64>
              %195 = arith.addf %193, %194 : f64
              %196 = arith.mulf %195, %cst : f64
              %197 = affine.load %arg2[%arg6, %arg7 + 1, %189] : memref<?x120x120xf64>
              %198 = arith.subf %197, %192 : f64
              %199 = affine.load %arg2[%arg6, %arg7 - 1, %189] : memref<?x120x120xf64>
              %200 = arith.addf %198, %199 : f64
              %201 = arith.mulf %200, %cst : f64
              %202 = arith.addf %196, %201 : f64
              %203 = affine.load %arg2[%arg6, %arg7, %189 + 1] : memref<?x120x120xf64>
              %204 = arith.subf %203, %192 : f64
              %205 = affine.load %arg2[%arg6, %arg7, %189 - 1] : memref<?x120x120xf64>
              %206 = arith.addf %204, %205 : f64
              %207 = arith.mulf %206, %cst : f64
              %208 = arith.addf %202, %207 : f64
              %209 = arith.addf %208, %191 : f64
              affine.store %209, %arg3[%arg6, %arg7, %189] : memref<?x120x120xf64>
            }
            affine.for %arg8 = #map3()[%0] to #map9()[%0] step 2 {
              %1 = affine.load %arg2[%arg6 + 1, %arg7, %arg8] : memref<?x120x120xf64>
              %2 = affine.load %arg2[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %3 = arith.mulf %2, %cst_0 : f64
              %4 = arith.subf %1, %3 : f64
              %5 = affine.load %arg2[%arg6 - 1, %arg7, %arg8] : memref<?x120x120xf64>
              %6 = arith.addf %4, %5 : f64
              %7 = arith.mulf %6, %cst : f64
              %8 = affine.load %arg2[%arg6, %arg7 + 1, %arg8] : memref<?x120x120xf64>
              %9 = arith.subf %8, %3 : f64
              %10 = affine.load %arg2[%arg6, %arg7 - 1, %arg8] : memref<?x120x120xf64>
              %11 = arith.addf %9, %10 : f64
              %12 = arith.mulf %11, %cst : f64
              %13 = arith.addf %7, %12 : f64
              %14 = affine.load %arg2[%arg6, %arg7, %arg8 + 1] : memref<?x120x120xf64>
              %15 = arith.subf %14, %3 : f64
              %16 = affine.load %arg2[%arg6, %arg7, %arg8 - 1] : memref<?x120x120xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.mulf %17, %cst : f64
              %19 = arith.addf %13, %18 : f64
              %20 = arith.addf %19, %2 : f64
              affine.store %20, %arg3[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %21 = affine.apply #map4(%arg8)
              %22 = affine.load %arg2[%arg6 + 1, %arg7, %21] : memref<?x120x120xf64>
              %23 = affine.load %arg2[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %24 = arith.mulf %23, %cst_0 : f64
              %25 = arith.subf %22, %24 : f64
              %26 = affine.load %arg2[%arg6 - 1, %arg7, %21] : memref<?x120x120xf64>
              %27 = arith.addf %25, %26 : f64
              %28 = arith.mulf %27, %cst : f64
              %29 = affine.load %arg2[%arg6, %arg7 + 1, %21] : memref<?x120x120xf64>
              %30 = arith.subf %29, %24 : f64
              %31 = affine.load %arg2[%arg6, %arg7 - 1, %21] : memref<?x120x120xf64>
              %32 = arith.addf %30, %31 : f64
              %33 = arith.mulf %32, %cst : f64
              %34 = arith.addf %28, %33 : f64
              %35 = affine.load %arg2[%arg6, %arg7, %21 + 1] : memref<?x120x120xf64>
              %36 = arith.subf %35, %24 : f64
              %37 = affine.load %arg2[%arg6, %arg7, %21 - 1] : memref<?x120x120xf64>
              %38 = arith.addf %36, %37 : f64
              %39 = arith.mulf %38, %cst : f64
              %40 = arith.addf %34, %39 : f64
              %41 = arith.addf %40, %23 : f64
              affine.store %41, %arg3[%arg6, %arg7, %21] : memref<?x120x120xf64>
            }
            affine.for %arg8 = #map9()[%0] to #map10()[%0] step 5 {
              %1 = affine.load %arg2[%arg6 + 1, %arg7, %arg8] : memref<?x120x120xf64>
              %2 = affine.load %arg2[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %3 = arith.mulf %2, %cst_0 : f64
              %4 = arith.subf %1, %3 : f64
              %5 = affine.load %arg2[%arg6 - 1, %arg7, %arg8] : memref<?x120x120xf64>
              %6 = arith.addf %4, %5 : f64
              %7 = arith.mulf %6, %cst : f64
              %8 = affine.load %arg2[%arg6, %arg7 + 1, %arg8] : memref<?x120x120xf64>
              %9 = arith.subf %8, %3 : f64
              %10 = affine.load %arg2[%arg6, %arg7 - 1, %arg8] : memref<?x120x120xf64>
              %11 = arith.addf %9, %10 : f64
              %12 = arith.mulf %11, %cst : f64
              %13 = arith.addf %7, %12 : f64
              %14 = affine.load %arg2[%arg6, %arg7, %arg8 + 1] : memref<?x120x120xf64>
              %15 = arith.subf %14, %3 : f64
              %16 = affine.load %arg2[%arg6, %arg7, %arg8 - 1] : memref<?x120x120xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.mulf %17, %cst : f64
              %19 = arith.addf %13, %18 : f64
              %20 = arith.addf %19, %2 : f64
              affine.store %20, %arg3[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %21 = affine.apply #map4(%arg8)
              %22 = affine.load %arg2[%arg6 + 1, %arg7, %21] : memref<?x120x120xf64>
              %23 = affine.load %arg2[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %24 = arith.mulf %23, %cst_0 : f64
              %25 = arith.subf %22, %24 : f64
              %26 = affine.load %arg2[%arg6 - 1, %arg7, %21] : memref<?x120x120xf64>
              %27 = arith.addf %25, %26 : f64
              %28 = arith.mulf %27, %cst : f64
              %29 = affine.load %arg2[%arg6, %arg7 + 1, %21] : memref<?x120x120xf64>
              %30 = arith.subf %29, %24 : f64
              %31 = affine.load %arg2[%arg6, %arg7 - 1, %21] : memref<?x120x120xf64>
              %32 = arith.addf %30, %31 : f64
              %33 = arith.mulf %32, %cst : f64
              %34 = arith.addf %28, %33 : f64
              %35 = affine.load %arg2[%arg6, %arg7, %21 + 1] : memref<?x120x120xf64>
              %36 = arith.subf %35, %24 : f64
              %37 = affine.load %arg2[%arg6, %arg7, %21 - 1] : memref<?x120x120xf64>
              %38 = arith.addf %36, %37 : f64
              %39 = arith.mulf %38, %cst : f64
              %40 = arith.addf %34, %39 : f64
              %41 = arith.addf %40, %23 : f64
              affine.store %41, %arg3[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %42 = affine.apply #map5(%arg8)
              %43 = affine.load %arg2[%arg6 + 1, %arg7, %42] : memref<?x120x120xf64>
              %44 = affine.load %arg2[%arg6, %arg7, %42] : memref<?x120x120xf64>
              %45 = arith.mulf %44, %cst_0 : f64
              %46 = arith.subf %43, %45 : f64
              %47 = affine.load %arg2[%arg6 - 1, %arg7, %42] : memref<?x120x120xf64>
              %48 = arith.addf %46, %47 : f64
              %49 = arith.mulf %48, %cst : f64
              %50 = affine.load %arg2[%arg6, %arg7 + 1, %42] : memref<?x120x120xf64>
              %51 = arith.subf %50, %45 : f64
              %52 = affine.load %arg2[%arg6, %arg7 - 1, %42] : memref<?x120x120xf64>
              %53 = arith.addf %51, %52 : f64
              %54 = arith.mulf %53, %cst : f64
              %55 = arith.addf %49, %54 : f64
              %56 = affine.load %arg2[%arg6, %arg7, %42 + 1] : memref<?x120x120xf64>
              %57 = arith.subf %56, %45 : f64
              %58 = affine.load %arg2[%arg6, %arg7, %42 - 1] : memref<?x120x120xf64>
              %59 = arith.addf %57, %58 : f64
              %60 = arith.mulf %59, %cst : f64
              %61 = arith.addf %55, %60 : f64
              %62 = arith.addf %61, %44 : f64
              affine.store %62, %arg3[%arg6, %arg7, %42] : memref<?x120x120xf64>
              %63 = affine.apply #map11(%arg8)
              %64 = affine.load %arg2[%arg6 + 1, %arg7, %63] : memref<?x120x120xf64>
              %65 = affine.load %arg2[%arg6, %arg7, %63] : memref<?x120x120xf64>
              %66 = arith.mulf %65, %cst_0 : f64
              %67 = arith.subf %64, %66 : f64
              %68 = affine.load %arg2[%arg6 - 1, %arg7, %63] : memref<?x120x120xf64>
              %69 = arith.addf %67, %68 : f64
              %70 = arith.mulf %69, %cst : f64
              %71 = affine.load %arg2[%arg6, %arg7 + 1, %63] : memref<?x120x120xf64>
              %72 = arith.subf %71, %66 : f64
              %73 = affine.load %arg2[%arg6, %arg7 - 1, %63] : memref<?x120x120xf64>
              %74 = arith.addf %72, %73 : f64
              %75 = arith.mulf %74, %cst : f64
              %76 = arith.addf %70, %75 : f64
              %77 = affine.load %arg2[%arg6, %arg7, %63 + 1] : memref<?x120x120xf64>
              %78 = arith.subf %77, %66 : f64
              %79 = affine.load %arg2[%arg6, %arg7, %63 - 1] : memref<?x120x120xf64>
              %80 = arith.addf %78, %79 : f64
              %81 = arith.mulf %80, %cst : f64
              %82 = arith.addf %76, %81 : f64
              %83 = arith.addf %82, %65 : f64
              affine.store %83, %arg3[%arg6, %arg7, %63] : memref<?x120x120xf64>
              %84 = affine.apply #map6(%arg8)
              %85 = affine.load %arg2[%arg6 + 1, %arg7, %84] : memref<?x120x120xf64>
              %86 = affine.load %arg2[%arg6, %arg7, %84] : memref<?x120x120xf64>
              %87 = arith.mulf %86, %cst_0 : f64
              %88 = arith.subf %85, %87 : f64
              %89 = affine.load %arg2[%arg6 - 1, %arg7, %84] : memref<?x120x120xf64>
              %90 = arith.addf %88, %89 : f64
              %91 = arith.mulf %90, %cst : f64
              %92 = affine.load %arg2[%arg6, %arg7 + 1, %84] : memref<?x120x120xf64>
              %93 = arith.subf %92, %87 : f64
              %94 = affine.load %arg2[%arg6, %arg7 - 1, %84] : memref<?x120x120xf64>
              %95 = arith.addf %93, %94 : f64
              %96 = arith.mulf %95, %cst : f64
              %97 = arith.addf %91, %96 : f64
              %98 = affine.load %arg2[%arg6, %arg7, %84 + 1] : memref<?x120x120xf64>
              %99 = arith.subf %98, %87 : f64
              %100 = affine.load %arg2[%arg6, %arg7, %84 - 1] : memref<?x120x120xf64>
              %101 = arith.addf %99, %100 : f64
              %102 = arith.mulf %101, %cst : f64
              %103 = arith.addf %97, %102 : f64
              %104 = arith.addf %103, %86 : f64
              affine.store %104, %arg3[%arg6, %arg7, %84] : memref<?x120x120xf64>
            }
            affine.for %arg8 = #map10()[%0] to #map2()[%0] {
              %1 = affine.load %arg2[%arg6 + 1, %arg7, %arg8] : memref<?x120x120xf64>
              %2 = affine.load %arg2[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %3 = arith.mulf %2, %cst_0 : f64
              %4 = arith.subf %1, %3 : f64
              %5 = affine.load %arg2[%arg6 - 1, %arg7, %arg8] : memref<?x120x120xf64>
              %6 = arith.addf %4, %5 : f64
              %7 = arith.mulf %6, %cst : f64
              %8 = affine.load %arg2[%arg6, %arg7 + 1, %arg8] : memref<?x120x120xf64>
              %9 = arith.subf %8, %3 : f64
              %10 = affine.load %arg2[%arg6, %arg7 - 1, %arg8] : memref<?x120x120xf64>
              %11 = arith.addf %9, %10 : f64
              %12 = arith.mulf %11, %cst : f64
              %13 = arith.addf %7, %12 : f64
              %14 = affine.load %arg2[%arg6, %arg7, %arg8 + 1] : memref<?x120x120xf64>
              %15 = arith.subf %14, %3 : f64
              %16 = affine.load %arg2[%arg6, %arg7, %arg8 - 1] : memref<?x120x120xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.mulf %17, %cst : f64
              %19 = arith.addf %13, %18 : f64
              %20 = arith.addf %19, %2 : f64
              affine.store %20, %arg3[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
            }
          }
        }
        affine.for %arg6 = 1 to #map2()[%0] {
          affine.for %arg7 = 1 to #map2()[%0] {
            affine.for %arg8 = 1 to #map3()[%0] step 10 {
              %1 = affine.load %arg3[%arg6 + 1, %arg7, %arg8] : memref<?x120x120xf64>
              %2 = affine.load %arg3[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %3 = arith.mulf %2, %cst_0 : f64
              %4 = arith.subf %1, %3 : f64
              %5 = affine.load %arg3[%arg6 - 1, %arg7, %arg8] : memref<?x120x120xf64>
              %6 = arith.addf %4, %5 : f64
              %7 = arith.mulf %6, %cst : f64
              %8 = affine.load %arg3[%arg6, %arg7 + 1, %arg8] : memref<?x120x120xf64>
              %9 = arith.subf %8, %3 : f64
              %10 = affine.load %arg3[%arg6, %arg7 - 1, %arg8] : memref<?x120x120xf64>
              %11 = arith.addf %9, %10 : f64
              %12 = arith.mulf %11, %cst : f64
              %13 = arith.addf %7, %12 : f64
              %14 = affine.load %arg3[%arg6, %arg7, %arg8 + 1] : memref<?x120x120xf64>
              %15 = arith.subf %14, %3 : f64
              %16 = affine.load %arg3[%arg6, %arg7, %arg8 - 1] : memref<?x120x120xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.mulf %17, %cst : f64
              %19 = arith.addf %13, %18 : f64
              %20 = arith.addf %19, %2 : f64
              affine.store %20, %arg2[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %21 = affine.apply #map4(%arg8)
              %22 = affine.load %arg3[%arg6 + 1, %arg7, %21] : memref<?x120x120xf64>
              %23 = affine.load %arg3[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %24 = arith.mulf %23, %cst_0 : f64
              %25 = arith.subf %22, %24 : f64
              %26 = affine.load %arg3[%arg6 - 1, %arg7, %21] : memref<?x120x120xf64>
              %27 = arith.addf %25, %26 : f64
              %28 = arith.mulf %27, %cst : f64
              %29 = affine.load %arg3[%arg6, %arg7 + 1, %21] : memref<?x120x120xf64>
              %30 = arith.subf %29, %24 : f64
              %31 = affine.load %arg3[%arg6, %arg7 - 1, %21] : memref<?x120x120xf64>
              %32 = arith.addf %30, %31 : f64
              %33 = arith.mulf %32, %cst : f64
              %34 = arith.addf %28, %33 : f64
              %35 = affine.load %arg3[%arg6, %arg7, %21 + 1] : memref<?x120x120xf64>
              %36 = arith.subf %35, %24 : f64
              %37 = affine.load %arg3[%arg6, %arg7, %21 - 1] : memref<?x120x120xf64>
              %38 = arith.addf %36, %37 : f64
              %39 = arith.mulf %38, %cst : f64
              %40 = arith.addf %34, %39 : f64
              %41 = arith.addf %40, %23 : f64
              affine.store %41, %arg2[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %42 = affine.apply #map5(%arg8)
              %43 = affine.load %arg3[%arg6 + 1, %arg7, %42] : memref<?x120x120xf64>
              %44 = affine.load %arg3[%arg6, %arg7, %42] : memref<?x120x120xf64>
              %45 = arith.mulf %44, %cst_0 : f64
              %46 = arith.subf %43, %45 : f64
              %47 = affine.load %arg3[%arg6 - 1, %arg7, %42] : memref<?x120x120xf64>
              %48 = arith.addf %46, %47 : f64
              %49 = arith.mulf %48, %cst : f64
              %50 = affine.load %arg3[%arg6, %arg7 + 1, %42] : memref<?x120x120xf64>
              %51 = arith.subf %50, %45 : f64
              %52 = affine.load %arg3[%arg6, %arg7 - 1, %42] : memref<?x120x120xf64>
              %53 = arith.addf %51, %52 : f64
              %54 = arith.mulf %53, %cst : f64
              %55 = arith.addf %49, %54 : f64
              %56 = affine.load %arg3[%arg6, %arg7, %42 + 1] : memref<?x120x120xf64>
              %57 = arith.subf %56, %45 : f64
              %58 = affine.load %arg3[%arg6, %arg7, %42 - 1] : memref<?x120x120xf64>
              %59 = arith.addf %57, %58 : f64
              %60 = arith.mulf %59, %cst : f64
              %61 = arith.addf %55, %60 : f64
              %62 = arith.addf %61, %44 : f64
              affine.store %62, %arg2[%arg6, %arg7, %42] : memref<?x120x120xf64>
              %63 = affine.apply #map4(%42)
              %64 = affine.load %arg3[%arg6 + 1, %arg7, %63] : memref<?x120x120xf64>
              %65 = affine.load %arg3[%arg6, %arg7, %63] : memref<?x120x120xf64>
              %66 = arith.mulf %65, %cst_0 : f64
              %67 = arith.subf %64, %66 : f64
              %68 = affine.load %arg3[%arg6 - 1, %arg7, %63] : memref<?x120x120xf64>
              %69 = arith.addf %67, %68 : f64
              %70 = arith.mulf %69, %cst : f64
              %71 = affine.load %arg3[%arg6, %arg7 + 1, %63] : memref<?x120x120xf64>
              %72 = arith.subf %71, %66 : f64
              %73 = affine.load %arg3[%arg6, %arg7 - 1, %63] : memref<?x120x120xf64>
              %74 = arith.addf %72, %73 : f64
              %75 = arith.mulf %74, %cst : f64
              %76 = arith.addf %70, %75 : f64
              %77 = affine.load %arg3[%arg6, %arg7, %63 + 1] : memref<?x120x120xf64>
              %78 = arith.subf %77, %66 : f64
              %79 = affine.load %arg3[%arg6, %arg7, %63 - 1] : memref<?x120x120xf64>
              %80 = arith.addf %78, %79 : f64
              %81 = arith.mulf %80, %cst : f64
              %82 = arith.addf %76, %81 : f64
              %83 = arith.addf %82, %65 : f64
              affine.store %83, %arg2[%arg6, %arg7, %63] : memref<?x120x120xf64>
              %84 = affine.apply #map6(%arg8)
              %85 = affine.load %arg3[%arg6 + 1, %arg7, %84] : memref<?x120x120xf64>
              %86 = affine.load %arg3[%arg6, %arg7, %84] : memref<?x120x120xf64>
              %87 = arith.mulf %86, %cst_0 : f64
              %88 = arith.subf %85, %87 : f64
              %89 = affine.load %arg3[%arg6 - 1, %arg7, %84] : memref<?x120x120xf64>
              %90 = arith.addf %88, %89 : f64
              %91 = arith.mulf %90, %cst : f64
              %92 = affine.load %arg3[%arg6, %arg7 + 1, %84] : memref<?x120x120xf64>
              %93 = arith.subf %92, %87 : f64
              %94 = affine.load %arg3[%arg6, %arg7 - 1, %84] : memref<?x120x120xf64>
              %95 = arith.addf %93, %94 : f64
              %96 = arith.mulf %95, %cst : f64
              %97 = arith.addf %91, %96 : f64
              %98 = affine.load %arg3[%arg6, %arg7, %84 + 1] : memref<?x120x120xf64>
              %99 = arith.subf %98, %87 : f64
              %100 = affine.load %arg3[%arg6, %arg7, %84 - 1] : memref<?x120x120xf64>
              %101 = arith.addf %99, %100 : f64
              %102 = arith.mulf %101, %cst : f64
              %103 = arith.addf %97, %102 : f64
              %104 = arith.addf %103, %86 : f64
              affine.store %104, %arg2[%arg6, %arg7, %84] : memref<?x120x120xf64>
              %105 = affine.apply #map4(%84)
              %106 = affine.load %arg3[%arg6 + 1, %arg7, %105] : memref<?x120x120xf64>
              %107 = affine.load %arg3[%arg6, %arg7, %105] : memref<?x120x120xf64>
              %108 = arith.mulf %107, %cst_0 : f64
              %109 = arith.subf %106, %108 : f64
              %110 = affine.load %arg3[%arg6 - 1, %arg7, %105] : memref<?x120x120xf64>
              %111 = arith.addf %109, %110 : f64
              %112 = arith.mulf %111, %cst : f64
              %113 = affine.load %arg3[%arg6, %arg7 + 1, %105] : memref<?x120x120xf64>
              %114 = arith.subf %113, %108 : f64
              %115 = affine.load %arg3[%arg6, %arg7 - 1, %105] : memref<?x120x120xf64>
              %116 = arith.addf %114, %115 : f64
              %117 = arith.mulf %116, %cst : f64
              %118 = arith.addf %112, %117 : f64
              %119 = affine.load %arg3[%arg6, %arg7, %105 + 1] : memref<?x120x120xf64>
              %120 = arith.subf %119, %108 : f64
              %121 = affine.load %arg3[%arg6, %arg7, %105 - 1] : memref<?x120x120xf64>
              %122 = arith.addf %120, %121 : f64
              %123 = arith.mulf %122, %cst : f64
              %124 = arith.addf %118, %123 : f64
              %125 = arith.addf %124, %107 : f64
              affine.store %125, %arg2[%arg6, %arg7, %105] : memref<?x120x120xf64>
              %126 = affine.apply #map7(%arg8)
              %127 = affine.load %arg3[%arg6 + 1, %arg7, %126] : memref<?x120x120xf64>
              %128 = affine.load %arg3[%arg6, %arg7, %126] : memref<?x120x120xf64>
              %129 = arith.mulf %128, %cst_0 : f64
              %130 = arith.subf %127, %129 : f64
              %131 = affine.load %arg3[%arg6 - 1, %arg7, %126] : memref<?x120x120xf64>
              %132 = arith.addf %130, %131 : f64
              %133 = arith.mulf %132, %cst : f64
              %134 = affine.load %arg3[%arg6, %arg7 + 1, %126] : memref<?x120x120xf64>
              %135 = arith.subf %134, %129 : f64
              %136 = affine.load %arg3[%arg6, %arg7 - 1, %126] : memref<?x120x120xf64>
              %137 = arith.addf %135, %136 : f64
              %138 = arith.mulf %137, %cst : f64
              %139 = arith.addf %133, %138 : f64
              %140 = affine.load %arg3[%arg6, %arg7, %126 + 1] : memref<?x120x120xf64>
              %141 = arith.subf %140, %129 : f64
              %142 = affine.load %arg3[%arg6, %arg7, %126 - 1] : memref<?x120x120xf64>
              %143 = arith.addf %141, %142 : f64
              %144 = arith.mulf %143, %cst : f64
              %145 = arith.addf %139, %144 : f64
              %146 = arith.addf %145, %128 : f64
              affine.store %146, %arg2[%arg6, %arg7, %126] : memref<?x120x120xf64>
              %147 = affine.apply #map4(%126)
              %148 = affine.load %arg3[%arg6 + 1, %arg7, %147] : memref<?x120x120xf64>
              %149 = affine.load %arg3[%arg6, %arg7, %147] : memref<?x120x120xf64>
              %150 = arith.mulf %149, %cst_0 : f64
              %151 = arith.subf %148, %150 : f64
              %152 = affine.load %arg3[%arg6 - 1, %arg7, %147] : memref<?x120x120xf64>
              %153 = arith.addf %151, %152 : f64
              %154 = arith.mulf %153, %cst : f64
              %155 = affine.load %arg3[%arg6, %arg7 + 1, %147] : memref<?x120x120xf64>
              %156 = arith.subf %155, %150 : f64
              %157 = affine.load %arg3[%arg6, %arg7 - 1, %147] : memref<?x120x120xf64>
              %158 = arith.addf %156, %157 : f64
              %159 = arith.mulf %158, %cst : f64
              %160 = arith.addf %154, %159 : f64
              %161 = affine.load %arg3[%arg6, %arg7, %147 + 1] : memref<?x120x120xf64>
              %162 = arith.subf %161, %150 : f64
              %163 = affine.load %arg3[%arg6, %arg7, %147 - 1] : memref<?x120x120xf64>
              %164 = arith.addf %162, %163 : f64
              %165 = arith.mulf %164, %cst : f64
              %166 = arith.addf %160, %165 : f64
              %167 = arith.addf %166, %149 : f64
              affine.store %167, %arg2[%arg6, %arg7, %147] : memref<?x120x120xf64>
              %168 = affine.apply #map8(%arg8)
              %169 = affine.load %arg3[%arg6 + 1, %arg7, %168] : memref<?x120x120xf64>
              %170 = affine.load %arg3[%arg6, %arg7, %168] : memref<?x120x120xf64>
              %171 = arith.mulf %170, %cst_0 : f64
              %172 = arith.subf %169, %171 : f64
              %173 = affine.load %arg3[%arg6 - 1, %arg7, %168] : memref<?x120x120xf64>
              %174 = arith.addf %172, %173 : f64
              %175 = arith.mulf %174, %cst : f64
              %176 = affine.load %arg3[%arg6, %arg7 + 1, %168] : memref<?x120x120xf64>
              %177 = arith.subf %176, %171 : f64
              %178 = affine.load %arg3[%arg6, %arg7 - 1, %168] : memref<?x120x120xf64>
              %179 = arith.addf %177, %178 : f64
              %180 = arith.mulf %179, %cst : f64
              %181 = arith.addf %175, %180 : f64
              %182 = affine.load %arg3[%arg6, %arg7, %168 + 1] : memref<?x120x120xf64>
              %183 = arith.subf %182, %171 : f64
              %184 = affine.load %arg3[%arg6, %arg7, %168 - 1] : memref<?x120x120xf64>
              %185 = arith.addf %183, %184 : f64
              %186 = arith.mulf %185, %cst : f64
              %187 = arith.addf %181, %186 : f64
              %188 = arith.addf %187, %170 : f64
              affine.store %188, %arg2[%arg6, %arg7, %168] : memref<?x120x120xf64>
              %189 = affine.apply #map4(%168)
              %190 = affine.load %arg3[%arg6 + 1, %arg7, %189] : memref<?x120x120xf64>
              %191 = affine.load %arg3[%arg6, %arg7, %189] : memref<?x120x120xf64>
              %192 = arith.mulf %191, %cst_0 : f64
              %193 = arith.subf %190, %192 : f64
              %194 = affine.load %arg3[%arg6 - 1, %arg7, %189] : memref<?x120x120xf64>
              %195 = arith.addf %193, %194 : f64
              %196 = arith.mulf %195, %cst : f64
              %197 = affine.load %arg3[%arg6, %arg7 + 1, %189] : memref<?x120x120xf64>
              %198 = arith.subf %197, %192 : f64
              %199 = affine.load %arg3[%arg6, %arg7 - 1, %189] : memref<?x120x120xf64>
              %200 = arith.addf %198, %199 : f64
              %201 = arith.mulf %200, %cst : f64
              %202 = arith.addf %196, %201 : f64
              %203 = affine.load %arg3[%arg6, %arg7, %189 + 1] : memref<?x120x120xf64>
              %204 = arith.subf %203, %192 : f64
              %205 = affine.load %arg3[%arg6, %arg7, %189 - 1] : memref<?x120x120xf64>
              %206 = arith.addf %204, %205 : f64
              %207 = arith.mulf %206, %cst : f64
              %208 = arith.addf %202, %207 : f64
              %209 = arith.addf %208, %191 : f64
              affine.store %209, %arg2[%arg6, %arg7, %189] : memref<?x120x120xf64>
            }
            affine.for %arg8 = #map3()[%0] to #map9()[%0] step 2 {
              %1 = affine.load %arg3[%arg6 + 1, %arg7, %arg8] : memref<?x120x120xf64>
              %2 = affine.load %arg3[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %3 = arith.mulf %2, %cst_0 : f64
              %4 = arith.subf %1, %3 : f64
              %5 = affine.load %arg3[%arg6 - 1, %arg7, %arg8] : memref<?x120x120xf64>
              %6 = arith.addf %4, %5 : f64
              %7 = arith.mulf %6, %cst : f64
              %8 = affine.load %arg3[%arg6, %arg7 + 1, %arg8] : memref<?x120x120xf64>
              %9 = arith.subf %8, %3 : f64
              %10 = affine.load %arg3[%arg6, %arg7 - 1, %arg8] : memref<?x120x120xf64>
              %11 = arith.addf %9, %10 : f64
              %12 = arith.mulf %11, %cst : f64
              %13 = arith.addf %7, %12 : f64
              %14 = affine.load %arg3[%arg6, %arg7, %arg8 + 1] : memref<?x120x120xf64>
              %15 = arith.subf %14, %3 : f64
              %16 = affine.load %arg3[%arg6, %arg7, %arg8 - 1] : memref<?x120x120xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.mulf %17, %cst : f64
              %19 = arith.addf %13, %18 : f64
              %20 = arith.addf %19, %2 : f64
              affine.store %20, %arg2[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %21 = affine.apply #map4(%arg8)
              %22 = affine.load %arg3[%arg6 + 1, %arg7, %21] : memref<?x120x120xf64>
              %23 = affine.load %arg3[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %24 = arith.mulf %23, %cst_0 : f64
              %25 = arith.subf %22, %24 : f64
              %26 = affine.load %arg3[%arg6 - 1, %arg7, %21] : memref<?x120x120xf64>
              %27 = arith.addf %25, %26 : f64
              %28 = arith.mulf %27, %cst : f64
              %29 = affine.load %arg3[%arg6, %arg7 + 1, %21] : memref<?x120x120xf64>
              %30 = arith.subf %29, %24 : f64
              %31 = affine.load %arg3[%arg6, %arg7 - 1, %21] : memref<?x120x120xf64>
              %32 = arith.addf %30, %31 : f64
              %33 = arith.mulf %32, %cst : f64
              %34 = arith.addf %28, %33 : f64
              %35 = affine.load %arg3[%arg6, %arg7, %21 + 1] : memref<?x120x120xf64>
              %36 = arith.subf %35, %24 : f64
              %37 = affine.load %arg3[%arg6, %arg7, %21 - 1] : memref<?x120x120xf64>
              %38 = arith.addf %36, %37 : f64
              %39 = arith.mulf %38, %cst : f64
              %40 = arith.addf %34, %39 : f64
              %41 = arith.addf %40, %23 : f64
              affine.store %41, %arg2[%arg6, %arg7, %21] : memref<?x120x120xf64>
            }
            affine.for %arg8 = #map9()[%0] to #map10()[%0] step 5 {
              %1 = affine.load %arg3[%arg6 + 1, %arg7, %arg8] : memref<?x120x120xf64>
              %2 = affine.load %arg3[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %3 = arith.mulf %2, %cst_0 : f64
              %4 = arith.subf %1, %3 : f64
              %5 = affine.load %arg3[%arg6 - 1, %arg7, %arg8] : memref<?x120x120xf64>
              %6 = arith.addf %4, %5 : f64
              %7 = arith.mulf %6, %cst : f64
              %8 = affine.load %arg3[%arg6, %arg7 + 1, %arg8] : memref<?x120x120xf64>
              %9 = arith.subf %8, %3 : f64
              %10 = affine.load %arg3[%arg6, %arg7 - 1, %arg8] : memref<?x120x120xf64>
              %11 = arith.addf %9, %10 : f64
              %12 = arith.mulf %11, %cst : f64
              %13 = arith.addf %7, %12 : f64
              %14 = affine.load %arg3[%arg6, %arg7, %arg8 + 1] : memref<?x120x120xf64>
              %15 = arith.subf %14, %3 : f64
              %16 = affine.load %arg3[%arg6, %arg7, %arg8 - 1] : memref<?x120x120xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.mulf %17, %cst : f64
              %19 = arith.addf %13, %18 : f64
              %20 = arith.addf %19, %2 : f64
              affine.store %20, %arg2[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %21 = affine.apply #map4(%arg8)
              %22 = affine.load %arg3[%arg6 + 1, %arg7, %21] : memref<?x120x120xf64>
              %23 = affine.load %arg3[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %24 = arith.mulf %23, %cst_0 : f64
              %25 = arith.subf %22, %24 : f64
              %26 = affine.load %arg3[%arg6 - 1, %arg7, %21] : memref<?x120x120xf64>
              %27 = arith.addf %25, %26 : f64
              %28 = arith.mulf %27, %cst : f64
              %29 = affine.load %arg3[%arg6, %arg7 + 1, %21] : memref<?x120x120xf64>
              %30 = arith.subf %29, %24 : f64
              %31 = affine.load %arg3[%arg6, %arg7 - 1, %21] : memref<?x120x120xf64>
              %32 = arith.addf %30, %31 : f64
              %33 = arith.mulf %32, %cst : f64
              %34 = arith.addf %28, %33 : f64
              %35 = affine.load %arg3[%arg6, %arg7, %21 + 1] : memref<?x120x120xf64>
              %36 = arith.subf %35, %24 : f64
              %37 = affine.load %arg3[%arg6, %arg7, %21 - 1] : memref<?x120x120xf64>
              %38 = arith.addf %36, %37 : f64
              %39 = arith.mulf %38, %cst : f64
              %40 = arith.addf %34, %39 : f64
              %41 = arith.addf %40, %23 : f64
              affine.store %41, %arg2[%arg6, %arg7, %21] : memref<?x120x120xf64>
              %42 = affine.apply #map5(%arg8)
              %43 = affine.load %arg3[%arg6 + 1, %arg7, %42] : memref<?x120x120xf64>
              %44 = affine.load %arg3[%arg6, %arg7, %42] : memref<?x120x120xf64>
              %45 = arith.mulf %44, %cst_0 : f64
              %46 = arith.subf %43, %45 : f64
              %47 = affine.load %arg3[%arg6 - 1, %arg7, %42] : memref<?x120x120xf64>
              %48 = arith.addf %46, %47 : f64
              %49 = arith.mulf %48, %cst : f64
              %50 = affine.load %arg3[%arg6, %arg7 + 1, %42] : memref<?x120x120xf64>
              %51 = arith.subf %50, %45 : f64
              %52 = affine.load %arg3[%arg6, %arg7 - 1, %42] : memref<?x120x120xf64>
              %53 = arith.addf %51, %52 : f64
              %54 = arith.mulf %53, %cst : f64
              %55 = arith.addf %49, %54 : f64
              %56 = affine.load %arg3[%arg6, %arg7, %42 + 1] : memref<?x120x120xf64>
              %57 = arith.subf %56, %45 : f64
              %58 = affine.load %arg3[%arg6, %arg7, %42 - 1] : memref<?x120x120xf64>
              %59 = arith.addf %57, %58 : f64
              %60 = arith.mulf %59, %cst : f64
              %61 = arith.addf %55, %60 : f64
              %62 = arith.addf %61, %44 : f64
              affine.store %62, %arg2[%arg6, %arg7, %42] : memref<?x120x120xf64>
              %63 = affine.apply #map11(%arg8)
              %64 = affine.load %arg3[%arg6 + 1, %arg7, %63] : memref<?x120x120xf64>
              %65 = affine.load %arg3[%arg6, %arg7, %63] : memref<?x120x120xf64>
              %66 = arith.mulf %65, %cst_0 : f64
              %67 = arith.subf %64, %66 : f64
              %68 = affine.load %arg3[%arg6 - 1, %arg7, %63] : memref<?x120x120xf64>
              %69 = arith.addf %67, %68 : f64
              %70 = arith.mulf %69, %cst : f64
              %71 = affine.load %arg3[%arg6, %arg7 + 1, %63] : memref<?x120x120xf64>
              %72 = arith.subf %71, %66 : f64
              %73 = affine.load %arg3[%arg6, %arg7 - 1, %63] : memref<?x120x120xf64>
              %74 = arith.addf %72, %73 : f64
              %75 = arith.mulf %74, %cst : f64
              %76 = arith.addf %70, %75 : f64
              %77 = affine.load %arg3[%arg6, %arg7, %63 + 1] : memref<?x120x120xf64>
              %78 = arith.subf %77, %66 : f64
              %79 = affine.load %arg3[%arg6, %arg7, %63 - 1] : memref<?x120x120xf64>
              %80 = arith.addf %78, %79 : f64
              %81 = arith.mulf %80, %cst : f64
              %82 = arith.addf %76, %81 : f64
              %83 = arith.addf %82, %65 : f64
              affine.store %83, %arg2[%arg6, %arg7, %63] : memref<?x120x120xf64>
              %84 = affine.apply #map6(%arg8)
              %85 = affine.load %arg3[%arg6 + 1, %arg7, %84] : memref<?x120x120xf64>
              %86 = affine.load %arg3[%arg6, %arg7, %84] : memref<?x120x120xf64>
              %87 = arith.mulf %86, %cst_0 : f64
              %88 = arith.subf %85, %87 : f64
              %89 = affine.load %arg3[%arg6 - 1, %arg7, %84] : memref<?x120x120xf64>
              %90 = arith.addf %88, %89 : f64
              %91 = arith.mulf %90, %cst : f64
              %92 = affine.load %arg3[%arg6, %arg7 + 1, %84] : memref<?x120x120xf64>
              %93 = arith.subf %92, %87 : f64
              %94 = affine.load %arg3[%arg6, %arg7 - 1, %84] : memref<?x120x120xf64>
              %95 = arith.addf %93, %94 : f64
              %96 = arith.mulf %95, %cst : f64
              %97 = arith.addf %91, %96 : f64
              %98 = affine.load %arg3[%arg6, %arg7, %84 + 1] : memref<?x120x120xf64>
              %99 = arith.subf %98, %87 : f64
              %100 = affine.load %arg3[%arg6, %arg7, %84 - 1] : memref<?x120x120xf64>
              %101 = arith.addf %99, %100 : f64
              %102 = arith.mulf %101, %cst : f64
              %103 = arith.addf %97, %102 : f64
              %104 = arith.addf %103, %86 : f64
              affine.store %104, %arg2[%arg6, %arg7, %84] : memref<?x120x120xf64>
            }
            affine.for %arg8 = #map10()[%0] to #map2()[%0] {
              %1 = affine.load %arg3[%arg6 + 1, %arg7, %arg8] : memref<?x120x120xf64>
              %2 = affine.load %arg3[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
              %3 = arith.mulf %2, %cst_0 : f64
              %4 = arith.subf %1, %3 : f64
              %5 = affine.load %arg3[%arg6 - 1, %arg7, %arg8] : memref<?x120x120xf64>
              %6 = arith.addf %4, %5 : f64
              %7 = arith.mulf %6, %cst : f64
              %8 = affine.load %arg3[%arg6, %arg7 + 1, %arg8] : memref<?x120x120xf64>
              %9 = arith.subf %8, %3 : f64
              %10 = affine.load %arg3[%arg6, %arg7 - 1, %arg8] : memref<?x120x120xf64>
              %11 = arith.addf %9, %10 : f64
              %12 = arith.mulf %11, %cst : f64
              %13 = arith.addf %7, %12 : f64
              %14 = affine.load %arg3[%arg6, %arg7, %arg8 + 1] : memref<?x120x120xf64>
              %15 = arith.subf %14, %3 : f64
              %16 = affine.load %arg3[%arg6, %arg7, %arg8 - 1] : memref<?x120x120xf64>
              %17 = arith.addf %15, %16 : f64
              %18 = arith.mulf %17, %cst : f64
              %19 = arith.addf %13, %18 : f64
              %20 = arith.addf %19, %2 : f64
              affine.store %20, %arg2[%arg6, %arg7, %arg8] : memref<?x120x120xf64>
            }
          }
        }
      }
    }
    return
  }
}

