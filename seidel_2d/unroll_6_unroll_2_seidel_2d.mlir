#map = affine_map<()[s0] -> (s0 - 1)>
#map1 = affine_map<()[s0] -> (((s0 floordiv 2 - 1) floordiv 6) * 12 + 1)>
#map2 = affine_map<(d0) -> (d0 + 1)>
#map3 = affine_map<(d0) -> (d0 + 2)>
#map4 = affine_map<(d0) -> (d0 + 4)>
#map5 = affine_map<(d0) -> (d0 + 6)>
#map6 = affine_map<(d0) -> (d0 + 8)>
#map7 = affine_map<(d0) -> (d0 + 10)>
#map8 = affine_map<()[s0] -> ((s0 floordiv 2) * 2 - 1)>
#map9 = affine_map<()[s0] -> ((s0 floordiv 2) * 2 + ((s0 mod 2) floordiv 6) * 6 - 1)>
#map10 = affine_map<(d0) -> (d0 + 3)>
#map11 = affine_map<(d0) -> (d0 + 5)>
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi32>>, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi32>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi32>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i32>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-unknown-linux-gnu", "polygeist.target-cpu" = "x86-64", "polygeist.target-features" = "+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87", "polygeist.tune-cpu" = "generic"} {
  func.func @kernel_seidel_2d(%arg0: i32, %arg1: i32, %arg2: memref<?x2000xf64>) attributes {llvm.linkage = #llvm.linkage<external>} {
    %cst = arith.constant 9.000000e+00 : f64
    %0 = arith.index_cast %arg0 : i32 to index
    %1 = arith.index_cast %arg1 : i32 to index
    affine.for %arg3 = 0 to %0 {
      affine.for %arg4 = 1 to #map()[%1] {
        affine.for %arg5 = 1 to #map1()[%1] step 12 {
          %2 = affine.load %arg2[%arg4 - 1, %arg5 - 1] : memref<?x2000xf64>
          %3 = affine.load %arg2[%arg4 - 1, %arg5] : memref<?x2000xf64>
          %4 = arith.addf %2, %3 : f64
          %5 = affine.load %arg2[%arg4 - 1, %arg5 + 1] : memref<?x2000xf64>
          %6 = arith.addf %4, %5 : f64
          %7 = affine.load %arg2[%arg4, %arg5 - 1] : memref<?x2000xf64>
          %8 = arith.addf %6, %7 : f64
          %9 = affine.load %arg2[%arg4, %arg5] : memref<?x2000xf64>
          %10 = arith.addf %8, %9 : f64
          %11 = affine.load %arg2[%arg4, %arg5 + 1] : memref<?x2000xf64>
          %12 = arith.addf %10, %11 : f64
          %13 = affine.load %arg2[%arg4 + 1, %arg5 - 1] : memref<?x2000xf64>
          %14 = arith.addf %12, %13 : f64
          %15 = affine.load %arg2[%arg4 + 1, %arg5] : memref<?x2000xf64>
          %16 = arith.addf %14, %15 : f64
          %17 = affine.load %arg2[%arg4 + 1, %arg5 + 1] : memref<?x2000xf64>
          %18 = arith.addf %16, %17 : f64
          %19 = arith.divf %18, %cst : f64
          affine.store %19, %arg2[%arg4, %arg5] : memref<?x2000xf64>
          %20 = affine.apply #map2(%arg5)
          %21 = affine.load %arg2[%arg4 - 1, %20 - 1] : memref<?x2000xf64>
          %22 = affine.load %arg2[%arg4 - 1, %20] : memref<?x2000xf64>
          %23 = arith.addf %21, %22 : f64
          %24 = affine.load %arg2[%arg4 - 1, %20 + 1] : memref<?x2000xf64>
          %25 = arith.addf %23, %24 : f64
          %26 = affine.load %arg2[%arg4, %20 - 1] : memref<?x2000xf64>
          %27 = arith.addf %25, %26 : f64
          %28 = affine.load %arg2[%arg4, %20] : memref<?x2000xf64>
          %29 = arith.addf %27, %28 : f64
          %30 = affine.load %arg2[%arg4, %20 + 1] : memref<?x2000xf64>
          %31 = arith.addf %29, %30 : f64
          %32 = affine.load %arg2[%arg4 + 1, %20 - 1] : memref<?x2000xf64>
          %33 = arith.addf %31, %32 : f64
          %34 = affine.load %arg2[%arg4 + 1, %20] : memref<?x2000xf64>
          %35 = arith.addf %33, %34 : f64
          %36 = affine.load %arg2[%arg4 + 1, %20 + 1] : memref<?x2000xf64>
          %37 = arith.addf %35, %36 : f64
          %38 = arith.divf %37, %cst : f64
          affine.store %38, %arg2[%arg4, %20] : memref<?x2000xf64>
          %39 = affine.apply #map3(%arg5)
          %40 = affine.load %arg2[%arg4 - 1, %39 - 1] : memref<?x2000xf64>
          %41 = affine.load %arg2[%arg4 - 1, %39] : memref<?x2000xf64>
          %42 = arith.addf %40, %41 : f64
          %43 = affine.load %arg2[%arg4 - 1, %39 + 1] : memref<?x2000xf64>
          %44 = arith.addf %42, %43 : f64
          %45 = affine.load %arg2[%arg4, %39 - 1] : memref<?x2000xf64>
          %46 = arith.addf %44, %45 : f64
          %47 = affine.load %arg2[%arg4, %39] : memref<?x2000xf64>
          %48 = arith.addf %46, %47 : f64
          %49 = affine.load %arg2[%arg4, %39 + 1] : memref<?x2000xf64>
          %50 = arith.addf %48, %49 : f64
          %51 = affine.load %arg2[%arg4 + 1, %39 - 1] : memref<?x2000xf64>
          %52 = arith.addf %50, %51 : f64
          %53 = affine.load %arg2[%arg4 + 1, %39] : memref<?x2000xf64>
          %54 = arith.addf %52, %53 : f64
          %55 = affine.load %arg2[%arg4 + 1, %39 + 1] : memref<?x2000xf64>
          %56 = arith.addf %54, %55 : f64
          %57 = arith.divf %56, %cst : f64
          affine.store %57, %arg2[%arg4, %39] : memref<?x2000xf64>
          %58 = affine.apply #map2(%39)
          %59 = affine.load %arg2[%arg4 - 1, %58 - 1] : memref<?x2000xf64>
          %60 = affine.load %arg2[%arg4 - 1, %58] : memref<?x2000xf64>
          %61 = arith.addf %59, %60 : f64
          %62 = affine.load %arg2[%arg4 - 1, %58 + 1] : memref<?x2000xf64>
          %63 = arith.addf %61, %62 : f64
          %64 = affine.load %arg2[%arg4, %58 - 1] : memref<?x2000xf64>
          %65 = arith.addf %63, %64 : f64
          %66 = affine.load %arg2[%arg4, %58] : memref<?x2000xf64>
          %67 = arith.addf %65, %66 : f64
          %68 = affine.load %arg2[%arg4, %58 + 1] : memref<?x2000xf64>
          %69 = arith.addf %67, %68 : f64
          %70 = affine.load %arg2[%arg4 + 1, %58 - 1] : memref<?x2000xf64>
          %71 = arith.addf %69, %70 : f64
          %72 = affine.load %arg2[%arg4 + 1, %58] : memref<?x2000xf64>
          %73 = arith.addf %71, %72 : f64
          %74 = affine.load %arg2[%arg4 + 1, %58 + 1] : memref<?x2000xf64>
          %75 = arith.addf %73, %74 : f64
          %76 = arith.divf %75, %cst : f64
          affine.store %76, %arg2[%arg4, %58] : memref<?x2000xf64>
          %77 = affine.apply #map4(%arg5)
          %78 = affine.load %arg2[%arg4 - 1, %77 - 1] : memref<?x2000xf64>
          %79 = affine.load %arg2[%arg4 - 1, %77] : memref<?x2000xf64>
          %80 = arith.addf %78, %79 : f64
          %81 = affine.load %arg2[%arg4 - 1, %77 + 1] : memref<?x2000xf64>
          %82 = arith.addf %80, %81 : f64
          %83 = affine.load %arg2[%arg4, %77 - 1] : memref<?x2000xf64>
          %84 = arith.addf %82, %83 : f64
          %85 = affine.load %arg2[%arg4, %77] : memref<?x2000xf64>
          %86 = arith.addf %84, %85 : f64
          %87 = affine.load %arg2[%arg4, %77 + 1] : memref<?x2000xf64>
          %88 = arith.addf %86, %87 : f64
          %89 = affine.load %arg2[%arg4 + 1, %77 - 1] : memref<?x2000xf64>
          %90 = arith.addf %88, %89 : f64
          %91 = affine.load %arg2[%arg4 + 1, %77] : memref<?x2000xf64>
          %92 = arith.addf %90, %91 : f64
          %93 = affine.load %arg2[%arg4 + 1, %77 + 1] : memref<?x2000xf64>
          %94 = arith.addf %92, %93 : f64
          %95 = arith.divf %94, %cst : f64
          affine.store %95, %arg2[%arg4, %77] : memref<?x2000xf64>
          %96 = affine.apply #map2(%77)
          %97 = affine.load %arg2[%arg4 - 1, %96 - 1] : memref<?x2000xf64>
          %98 = affine.load %arg2[%arg4 - 1, %96] : memref<?x2000xf64>
          %99 = arith.addf %97, %98 : f64
          %100 = affine.load %arg2[%arg4 - 1, %96 + 1] : memref<?x2000xf64>
          %101 = arith.addf %99, %100 : f64
          %102 = affine.load %arg2[%arg4, %96 - 1] : memref<?x2000xf64>
          %103 = arith.addf %101, %102 : f64
          %104 = affine.load %arg2[%arg4, %96] : memref<?x2000xf64>
          %105 = arith.addf %103, %104 : f64
          %106 = affine.load %arg2[%arg4, %96 + 1] : memref<?x2000xf64>
          %107 = arith.addf %105, %106 : f64
          %108 = affine.load %arg2[%arg4 + 1, %96 - 1] : memref<?x2000xf64>
          %109 = arith.addf %107, %108 : f64
          %110 = affine.load %arg2[%arg4 + 1, %96] : memref<?x2000xf64>
          %111 = arith.addf %109, %110 : f64
          %112 = affine.load %arg2[%arg4 + 1, %96 + 1] : memref<?x2000xf64>
          %113 = arith.addf %111, %112 : f64
          %114 = arith.divf %113, %cst : f64
          affine.store %114, %arg2[%arg4, %96] : memref<?x2000xf64>
          %115 = affine.apply #map5(%arg5)
          %116 = affine.load %arg2[%arg4 - 1, %115 - 1] : memref<?x2000xf64>
          %117 = affine.load %arg2[%arg4 - 1, %115] : memref<?x2000xf64>
          %118 = arith.addf %116, %117 : f64
          %119 = affine.load %arg2[%arg4 - 1, %115 + 1] : memref<?x2000xf64>
          %120 = arith.addf %118, %119 : f64
          %121 = affine.load %arg2[%arg4, %115 - 1] : memref<?x2000xf64>
          %122 = arith.addf %120, %121 : f64
          %123 = affine.load %arg2[%arg4, %115] : memref<?x2000xf64>
          %124 = arith.addf %122, %123 : f64
          %125 = affine.load %arg2[%arg4, %115 + 1] : memref<?x2000xf64>
          %126 = arith.addf %124, %125 : f64
          %127 = affine.load %arg2[%arg4 + 1, %115 - 1] : memref<?x2000xf64>
          %128 = arith.addf %126, %127 : f64
          %129 = affine.load %arg2[%arg4 + 1, %115] : memref<?x2000xf64>
          %130 = arith.addf %128, %129 : f64
          %131 = affine.load %arg2[%arg4 + 1, %115 + 1] : memref<?x2000xf64>
          %132 = arith.addf %130, %131 : f64
          %133 = arith.divf %132, %cst : f64
          affine.store %133, %arg2[%arg4, %115] : memref<?x2000xf64>
          %134 = affine.apply #map2(%115)
          %135 = affine.load %arg2[%arg4 - 1, %134 - 1] : memref<?x2000xf64>
          %136 = affine.load %arg2[%arg4 - 1, %134] : memref<?x2000xf64>
          %137 = arith.addf %135, %136 : f64
          %138 = affine.load %arg2[%arg4 - 1, %134 + 1] : memref<?x2000xf64>
          %139 = arith.addf %137, %138 : f64
          %140 = affine.load %arg2[%arg4, %134 - 1] : memref<?x2000xf64>
          %141 = arith.addf %139, %140 : f64
          %142 = affine.load %arg2[%arg4, %134] : memref<?x2000xf64>
          %143 = arith.addf %141, %142 : f64
          %144 = affine.load %arg2[%arg4, %134 + 1] : memref<?x2000xf64>
          %145 = arith.addf %143, %144 : f64
          %146 = affine.load %arg2[%arg4 + 1, %134 - 1] : memref<?x2000xf64>
          %147 = arith.addf %145, %146 : f64
          %148 = affine.load %arg2[%arg4 + 1, %134] : memref<?x2000xf64>
          %149 = arith.addf %147, %148 : f64
          %150 = affine.load %arg2[%arg4 + 1, %134 + 1] : memref<?x2000xf64>
          %151 = arith.addf %149, %150 : f64
          %152 = arith.divf %151, %cst : f64
          affine.store %152, %arg2[%arg4, %134] : memref<?x2000xf64>
          %153 = affine.apply #map6(%arg5)
          %154 = affine.load %arg2[%arg4 - 1, %153 - 1] : memref<?x2000xf64>
          %155 = affine.load %arg2[%arg4 - 1, %153] : memref<?x2000xf64>
          %156 = arith.addf %154, %155 : f64
          %157 = affine.load %arg2[%arg4 - 1, %153 + 1] : memref<?x2000xf64>
          %158 = arith.addf %156, %157 : f64
          %159 = affine.load %arg2[%arg4, %153 - 1] : memref<?x2000xf64>
          %160 = arith.addf %158, %159 : f64
          %161 = affine.load %arg2[%arg4, %153] : memref<?x2000xf64>
          %162 = arith.addf %160, %161 : f64
          %163 = affine.load %arg2[%arg4, %153 + 1] : memref<?x2000xf64>
          %164 = arith.addf %162, %163 : f64
          %165 = affine.load %arg2[%arg4 + 1, %153 - 1] : memref<?x2000xf64>
          %166 = arith.addf %164, %165 : f64
          %167 = affine.load %arg2[%arg4 + 1, %153] : memref<?x2000xf64>
          %168 = arith.addf %166, %167 : f64
          %169 = affine.load %arg2[%arg4 + 1, %153 + 1] : memref<?x2000xf64>
          %170 = arith.addf %168, %169 : f64
          %171 = arith.divf %170, %cst : f64
          affine.store %171, %arg2[%arg4, %153] : memref<?x2000xf64>
          %172 = affine.apply #map2(%153)
          %173 = affine.load %arg2[%arg4 - 1, %172 - 1] : memref<?x2000xf64>
          %174 = affine.load %arg2[%arg4 - 1, %172] : memref<?x2000xf64>
          %175 = arith.addf %173, %174 : f64
          %176 = affine.load %arg2[%arg4 - 1, %172 + 1] : memref<?x2000xf64>
          %177 = arith.addf %175, %176 : f64
          %178 = affine.load %arg2[%arg4, %172 - 1] : memref<?x2000xf64>
          %179 = arith.addf %177, %178 : f64
          %180 = affine.load %arg2[%arg4, %172] : memref<?x2000xf64>
          %181 = arith.addf %179, %180 : f64
          %182 = affine.load %arg2[%arg4, %172 + 1] : memref<?x2000xf64>
          %183 = arith.addf %181, %182 : f64
          %184 = affine.load %arg2[%arg4 + 1, %172 - 1] : memref<?x2000xf64>
          %185 = arith.addf %183, %184 : f64
          %186 = affine.load %arg2[%arg4 + 1, %172] : memref<?x2000xf64>
          %187 = arith.addf %185, %186 : f64
          %188 = affine.load %arg2[%arg4 + 1, %172 + 1] : memref<?x2000xf64>
          %189 = arith.addf %187, %188 : f64
          %190 = arith.divf %189, %cst : f64
          affine.store %190, %arg2[%arg4, %172] : memref<?x2000xf64>
          %191 = affine.apply #map7(%arg5)
          %192 = affine.load %arg2[%arg4 - 1, %191 - 1] : memref<?x2000xf64>
          %193 = affine.load %arg2[%arg4 - 1, %191] : memref<?x2000xf64>
          %194 = arith.addf %192, %193 : f64
          %195 = affine.load %arg2[%arg4 - 1, %191 + 1] : memref<?x2000xf64>
          %196 = arith.addf %194, %195 : f64
          %197 = affine.load %arg2[%arg4, %191 - 1] : memref<?x2000xf64>
          %198 = arith.addf %196, %197 : f64
          %199 = affine.load %arg2[%arg4, %191] : memref<?x2000xf64>
          %200 = arith.addf %198, %199 : f64
          %201 = affine.load %arg2[%arg4, %191 + 1] : memref<?x2000xf64>
          %202 = arith.addf %200, %201 : f64
          %203 = affine.load %arg2[%arg4 + 1, %191 - 1] : memref<?x2000xf64>
          %204 = arith.addf %202, %203 : f64
          %205 = affine.load %arg2[%arg4 + 1, %191] : memref<?x2000xf64>
          %206 = arith.addf %204, %205 : f64
          %207 = affine.load %arg2[%arg4 + 1, %191 + 1] : memref<?x2000xf64>
          %208 = arith.addf %206, %207 : f64
          %209 = arith.divf %208, %cst : f64
          affine.store %209, %arg2[%arg4, %191] : memref<?x2000xf64>
          %210 = affine.apply #map2(%191)
          %211 = affine.load %arg2[%arg4 - 1, %210 - 1] : memref<?x2000xf64>
          %212 = affine.load %arg2[%arg4 - 1, %210] : memref<?x2000xf64>
          %213 = arith.addf %211, %212 : f64
          %214 = affine.load %arg2[%arg4 - 1, %210 + 1] : memref<?x2000xf64>
          %215 = arith.addf %213, %214 : f64
          %216 = affine.load %arg2[%arg4, %210 - 1] : memref<?x2000xf64>
          %217 = arith.addf %215, %216 : f64
          %218 = affine.load %arg2[%arg4, %210] : memref<?x2000xf64>
          %219 = arith.addf %217, %218 : f64
          %220 = affine.load %arg2[%arg4, %210 + 1] : memref<?x2000xf64>
          %221 = arith.addf %219, %220 : f64
          %222 = affine.load %arg2[%arg4 + 1, %210 - 1] : memref<?x2000xf64>
          %223 = arith.addf %221, %222 : f64
          %224 = affine.load %arg2[%arg4 + 1, %210] : memref<?x2000xf64>
          %225 = arith.addf %223, %224 : f64
          %226 = affine.load %arg2[%arg4 + 1, %210 + 1] : memref<?x2000xf64>
          %227 = arith.addf %225, %226 : f64
          %228 = arith.divf %227, %cst : f64
          affine.store %228, %arg2[%arg4, %210] : memref<?x2000xf64>
        }
        affine.for %arg5 = #map1()[%1] to #map8()[%1] step 2 {
          %2 = affine.load %arg2[%arg4 - 1, %arg5 - 1] : memref<?x2000xf64>
          %3 = affine.load %arg2[%arg4 - 1, %arg5] : memref<?x2000xf64>
          %4 = arith.addf %2, %3 : f64
          %5 = affine.load %arg2[%arg4 - 1, %arg5 + 1] : memref<?x2000xf64>
          %6 = arith.addf %4, %5 : f64
          %7 = affine.load %arg2[%arg4, %arg5 - 1] : memref<?x2000xf64>
          %8 = arith.addf %6, %7 : f64
          %9 = affine.load %arg2[%arg4, %arg5] : memref<?x2000xf64>
          %10 = arith.addf %8, %9 : f64
          %11 = affine.load %arg2[%arg4, %arg5 + 1] : memref<?x2000xf64>
          %12 = arith.addf %10, %11 : f64
          %13 = affine.load %arg2[%arg4 + 1, %arg5 - 1] : memref<?x2000xf64>
          %14 = arith.addf %12, %13 : f64
          %15 = affine.load %arg2[%arg4 + 1, %arg5] : memref<?x2000xf64>
          %16 = arith.addf %14, %15 : f64
          %17 = affine.load %arg2[%arg4 + 1, %arg5 + 1] : memref<?x2000xf64>
          %18 = arith.addf %16, %17 : f64
          %19 = arith.divf %18, %cst : f64
          affine.store %19, %arg2[%arg4, %arg5] : memref<?x2000xf64>
          %20 = affine.apply #map2(%arg5)
          %21 = affine.load %arg2[%arg4 - 1, %20 - 1] : memref<?x2000xf64>
          %22 = affine.load %arg2[%arg4 - 1, %20] : memref<?x2000xf64>
          %23 = arith.addf %21, %22 : f64
          %24 = affine.load %arg2[%arg4 - 1, %20 + 1] : memref<?x2000xf64>
          %25 = arith.addf %23, %24 : f64
          %26 = affine.load %arg2[%arg4, %20 - 1] : memref<?x2000xf64>
          %27 = arith.addf %25, %26 : f64
          %28 = affine.load %arg2[%arg4, %20] : memref<?x2000xf64>
          %29 = arith.addf %27, %28 : f64
          %30 = affine.load %arg2[%arg4, %20 + 1] : memref<?x2000xf64>
          %31 = arith.addf %29, %30 : f64
          %32 = affine.load %arg2[%arg4 + 1, %20 - 1] : memref<?x2000xf64>
          %33 = arith.addf %31, %32 : f64
          %34 = affine.load %arg2[%arg4 + 1, %20] : memref<?x2000xf64>
          %35 = arith.addf %33, %34 : f64
          %36 = affine.load %arg2[%arg4 + 1, %20 + 1] : memref<?x2000xf64>
          %37 = arith.addf %35, %36 : f64
          %38 = arith.divf %37, %cst : f64
          affine.store %38, %arg2[%arg4, %20] : memref<?x2000xf64>
        }
        affine.for %arg5 = #map8()[%1] to #map9()[%1] step 6 {
          %2 = affine.load %arg2[%arg4 - 1, %arg5 - 1] : memref<?x2000xf64>
          %3 = affine.load %arg2[%arg4 - 1, %arg5] : memref<?x2000xf64>
          %4 = arith.addf %2, %3 : f64
          %5 = affine.load %arg2[%arg4 - 1, %arg5 + 1] : memref<?x2000xf64>
          %6 = arith.addf %4, %5 : f64
          %7 = affine.load %arg2[%arg4, %arg5 - 1] : memref<?x2000xf64>
          %8 = arith.addf %6, %7 : f64
          %9 = affine.load %arg2[%arg4, %arg5] : memref<?x2000xf64>
          %10 = arith.addf %8, %9 : f64
          %11 = affine.load %arg2[%arg4, %arg5 + 1] : memref<?x2000xf64>
          %12 = arith.addf %10, %11 : f64
          %13 = affine.load %arg2[%arg4 + 1, %arg5 - 1] : memref<?x2000xf64>
          %14 = arith.addf %12, %13 : f64
          %15 = affine.load %arg2[%arg4 + 1, %arg5] : memref<?x2000xf64>
          %16 = arith.addf %14, %15 : f64
          %17 = affine.load %arg2[%arg4 + 1, %arg5 + 1] : memref<?x2000xf64>
          %18 = arith.addf %16, %17 : f64
          %19 = arith.divf %18, %cst : f64
          affine.store %19, %arg2[%arg4, %arg5] : memref<?x2000xf64>
          %20 = affine.apply #map2(%arg5)
          %21 = affine.load %arg2[%arg4 - 1, %20 - 1] : memref<?x2000xf64>
          %22 = affine.load %arg2[%arg4 - 1, %20] : memref<?x2000xf64>
          %23 = arith.addf %21, %22 : f64
          %24 = affine.load %arg2[%arg4 - 1, %20 + 1] : memref<?x2000xf64>
          %25 = arith.addf %23, %24 : f64
          %26 = affine.load %arg2[%arg4, %20 - 1] : memref<?x2000xf64>
          %27 = arith.addf %25, %26 : f64
          %28 = affine.load %arg2[%arg4, %20] : memref<?x2000xf64>
          %29 = arith.addf %27, %28 : f64
          %30 = affine.load %arg2[%arg4, %20 + 1] : memref<?x2000xf64>
          %31 = arith.addf %29, %30 : f64
          %32 = affine.load %arg2[%arg4 + 1, %20 - 1] : memref<?x2000xf64>
          %33 = arith.addf %31, %32 : f64
          %34 = affine.load %arg2[%arg4 + 1, %20] : memref<?x2000xf64>
          %35 = arith.addf %33, %34 : f64
          %36 = affine.load %arg2[%arg4 + 1, %20 + 1] : memref<?x2000xf64>
          %37 = arith.addf %35, %36 : f64
          %38 = arith.divf %37, %cst : f64
          affine.store %38, %arg2[%arg4, %20] : memref<?x2000xf64>
          %39 = affine.apply #map3(%arg5)
          %40 = affine.load %arg2[%arg4 - 1, %39 - 1] : memref<?x2000xf64>
          %41 = affine.load %arg2[%arg4 - 1, %39] : memref<?x2000xf64>
          %42 = arith.addf %40, %41 : f64
          %43 = affine.load %arg2[%arg4 - 1, %39 + 1] : memref<?x2000xf64>
          %44 = arith.addf %42, %43 : f64
          %45 = affine.load %arg2[%arg4, %39 - 1] : memref<?x2000xf64>
          %46 = arith.addf %44, %45 : f64
          %47 = affine.load %arg2[%arg4, %39] : memref<?x2000xf64>
          %48 = arith.addf %46, %47 : f64
          %49 = affine.load %arg2[%arg4, %39 + 1] : memref<?x2000xf64>
          %50 = arith.addf %48, %49 : f64
          %51 = affine.load %arg2[%arg4 + 1, %39 - 1] : memref<?x2000xf64>
          %52 = arith.addf %50, %51 : f64
          %53 = affine.load %arg2[%arg4 + 1, %39] : memref<?x2000xf64>
          %54 = arith.addf %52, %53 : f64
          %55 = affine.load %arg2[%arg4 + 1, %39 + 1] : memref<?x2000xf64>
          %56 = arith.addf %54, %55 : f64
          %57 = arith.divf %56, %cst : f64
          affine.store %57, %arg2[%arg4, %39] : memref<?x2000xf64>
          %58 = affine.apply #map10(%arg5)
          %59 = affine.load %arg2[%arg4 - 1, %58 - 1] : memref<?x2000xf64>
          %60 = affine.load %arg2[%arg4 - 1, %58] : memref<?x2000xf64>
          %61 = arith.addf %59, %60 : f64
          %62 = affine.load %arg2[%arg4 - 1, %58 + 1] : memref<?x2000xf64>
          %63 = arith.addf %61, %62 : f64
          %64 = affine.load %arg2[%arg4, %58 - 1] : memref<?x2000xf64>
          %65 = arith.addf %63, %64 : f64
          %66 = affine.load %arg2[%arg4, %58] : memref<?x2000xf64>
          %67 = arith.addf %65, %66 : f64
          %68 = affine.load %arg2[%arg4, %58 + 1] : memref<?x2000xf64>
          %69 = arith.addf %67, %68 : f64
          %70 = affine.load %arg2[%arg4 + 1, %58 - 1] : memref<?x2000xf64>
          %71 = arith.addf %69, %70 : f64
          %72 = affine.load %arg2[%arg4 + 1, %58] : memref<?x2000xf64>
          %73 = arith.addf %71, %72 : f64
          %74 = affine.load %arg2[%arg4 + 1, %58 + 1] : memref<?x2000xf64>
          %75 = arith.addf %73, %74 : f64
          %76 = arith.divf %75, %cst : f64
          affine.store %76, %arg2[%arg4, %58] : memref<?x2000xf64>
          %77 = affine.apply #map4(%arg5)
          %78 = affine.load %arg2[%arg4 - 1, %77 - 1] : memref<?x2000xf64>
          %79 = affine.load %arg2[%arg4 - 1, %77] : memref<?x2000xf64>
          %80 = arith.addf %78, %79 : f64
          %81 = affine.load %arg2[%arg4 - 1, %77 + 1] : memref<?x2000xf64>
          %82 = arith.addf %80, %81 : f64
          %83 = affine.load %arg2[%arg4, %77 - 1] : memref<?x2000xf64>
          %84 = arith.addf %82, %83 : f64
          %85 = affine.load %arg2[%arg4, %77] : memref<?x2000xf64>
          %86 = arith.addf %84, %85 : f64
          %87 = affine.load %arg2[%arg4, %77 + 1] : memref<?x2000xf64>
          %88 = arith.addf %86, %87 : f64
          %89 = affine.load %arg2[%arg4 + 1, %77 - 1] : memref<?x2000xf64>
          %90 = arith.addf %88, %89 : f64
          %91 = affine.load %arg2[%arg4 + 1, %77] : memref<?x2000xf64>
          %92 = arith.addf %90, %91 : f64
          %93 = affine.load %arg2[%arg4 + 1, %77 + 1] : memref<?x2000xf64>
          %94 = arith.addf %92, %93 : f64
          %95 = arith.divf %94, %cst : f64
          affine.store %95, %arg2[%arg4, %77] : memref<?x2000xf64>
          %96 = affine.apply #map11(%arg5)
          %97 = affine.load %arg2[%arg4 - 1, %96 - 1] : memref<?x2000xf64>
          %98 = affine.load %arg2[%arg4 - 1, %96] : memref<?x2000xf64>
          %99 = arith.addf %97, %98 : f64
          %100 = affine.load %arg2[%arg4 - 1, %96 + 1] : memref<?x2000xf64>
          %101 = arith.addf %99, %100 : f64
          %102 = affine.load %arg2[%arg4, %96 - 1] : memref<?x2000xf64>
          %103 = arith.addf %101, %102 : f64
          %104 = affine.load %arg2[%arg4, %96] : memref<?x2000xf64>
          %105 = arith.addf %103, %104 : f64
          %106 = affine.load %arg2[%arg4, %96 + 1] : memref<?x2000xf64>
          %107 = arith.addf %105, %106 : f64
          %108 = affine.load %arg2[%arg4 + 1, %96 - 1] : memref<?x2000xf64>
          %109 = arith.addf %107, %108 : f64
          %110 = affine.load %arg2[%arg4 + 1, %96] : memref<?x2000xf64>
          %111 = arith.addf %109, %110 : f64
          %112 = affine.load %arg2[%arg4 + 1, %96 + 1] : memref<?x2000xf64>
          %113 = arith.addf %111, %112 : f64
          %114 = arith.divf %113, %cst : f64
          affine.store %114, %arg2[%arg4, %96] : memref<?x2000xf64>
        }
        affine.for %arg5 = #map9()[%1] to #map()[%1] {
          %2 = affine.load %arg2[%arg4 - 1, %arg5 - 1] : memref<?x2000xf64>
          %3 = affine.load %arg2[%arg4 - 1, %arg5] : memref<?x2000xf64>
          %4 = arith.addf %2, %3 : f64
          %5 = affine.load %arg2[%arg4 - 1, %arg5 + 1] : memref<?x2000xf64>
          %6 = arith.addf %4, %5 : f64
          %7 = affine.load %arg2[%arg4, %arg5 - 1] : memref<?x2000xf64>
          %8 = arith.addf %6, %7 : f64
          %9 = affine.load %arg2[%arg4, %arg5] : memref<?x2000xf64>
          %10 = arith.addf %8, %9 : f64
          %11 = affine.load %arg2[%arg4, %arg5 + 1] : memref<?x2000xf64>
          %12 = arith.addf %10, %11 : f64
          %13 = affine.load %arg2[%arg4 + 1, %arg5 - 1] : memref<?x2000xf64>
          %14 = arith.addf %12, %13 : f64
          %15 = affine.load %arg2[%arg4 + 1, %arg5] : memref<?x2000xf64>
          %16 = arith.addf %14, %15 : f64
          %17 = affine.load %arg2[%arg4 + 1, %arg5 + 1] : memref<?x2000xf64>
          %18 = arith.addf %16, %17 : f64
          %19 = arith.divf %18, %cst : f64
          affine.store %19, %arg2[%arg4, %arg5] : memref<?x2000xf64>
        }
      }
    }
    return
  }
}

